class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> prefixSumCount; // Map to store the prefix sum and its frequency
        prefixSumCount[0] = 1; // Initialize with prefix sum 0 having one count

        int psum = 0; // Prefix sum
        int cnt = 0; // Count of subarrays with sum equal to k

        for (int i = 0; i < nums.size(); ++i) {
            psum += nums[i];

            // Check if there is a prefix sum that, when subtracted from the current sum, equals k
            int complement = psum - k;
            if (prefixSumCount.find(complement) != prefixSumCount.end()) {
                cnt += prefixSumCount[complement];
            }

            // Increment the count of the current prefix sum in the map
            prefixSumCount[psum]++;
        }

        return cnt;
    }
};
